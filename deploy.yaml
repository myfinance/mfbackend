apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mfconfigpvc
spec:
  storageClassName: mfconfigstorage
  accessModes:
    - ReadOnlyMany
  resources:
    requests:
      storage: 1Mi

---

apiVersion: v1
kind: PersistentVolume
metadata:
  name: nfsstorage
spec:
  storageClassName: mfconfigstorage
  accessModes:
    - ReadOnlyMany
  capacity:
    storage: 1Mi
  hostPath:
    path: /mnt/data/mf/dev_config/
    type: DirectoryOrCreate

---

apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mfdbpvc
spec:
  storageClassName: mfdbstorage
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 5Gi

---

apiVersion: v1
kind: PersistentVolume
metadata:
  name: localstorage
spec:
  storageClassName: mfdbstorage
  accessModes:
    - ReadWriteOnce
  capacity:
    storage: 5Gi
  hostPath:
    path: /opt/mf/local_db/
    type: Directory

---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: mfdb
spec:
  replicas: 1
  selector:
    matchLabels:
      app: mfdb  
  template:
    metadata:
      labels:
        app: mfdb
    spec:
      containers:
        - name: mfdb
          image: holgerfischer/myfinance-mfpostgres:0.0.0-alpha.1
          #never pull the image from dockerhub. Jenkins provides the image localy 
          imagePullPolicy: Never 
          volumeMounts:
           - name: myfinancedata
             mountPath: /var/lib/postgresql/data
          env:
          - name: POSTGRES_PASSWORD
            value: vulkan
      volumes:
        - name: myfinancedata
          persistentVolumeClaim:
              claimName: mfdbpvc            

---

apiVersion: batch/v1
kind: Job
metadata:
  name: mfupgrade
spec:
  #autocleanup after seconds
  ttlSecondsAfterFinished: 180
  template:
    spec:
      containers: 
      - name: mfupgrade
        image: holgerfischer/myfinance-mfdbupdate:0.0.0-alpha.1
        #never pull the image from dockerhub. Jenkins provides the image localy 
        imagePullPolicy: Never                      
        env:
        - name: DB_PW
          value: "vulkan"   
        - name: DB_IMAGE
          value: mfdb  
        - name: DB_USER
          value: postgres  
      restartPolicy: OnFailure     
  backoffLimit: 4  

---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: swaggerui
spec:
  replicas: 1
  selector:
    matchLabels:
      app: swaggerui
  template:
    metadata:
      labels:
        app: swaggerui
    spec:
      containers:
        - name: swaggerui
          image: swaggerapi/swagger-ui

---

#apiVersion: apps/v1
#kind: Deployment
#metadata:
#  name: myfinance
#spec:
#  replicas: 1
#  selector:
#    matchLabels:
#      app: myfinance
#  template:
#    metadata:
#      labels:
#        app: myfinance
#    spec:
#      containers:
#        - name: myfinance
#          image: holgerfischer/myfinance-mfbackend:0.0.0-alpha.1
#          #never pull the image from dockerhub. Jenkins provides the image localy
#          imagePullPolicy: Never
#          tty: true
#          volumeMounts:
#           - name: myfinanceconfig
#             mountPath: /MyFinance/envconfig
#      volumes:
#        - name: myfinanceconfig
#          persistentVolumeClaim:
#              claimName: mfconfigpvc
#---

apiVersion: v1
kind: Service
metadata:
 name: mfdb
spec:
 #this defines which pod is going to be presented by this service
 selector:
  app: mfdb
 ports:
    - name: mfdb
      port: 5432
      nodePort: 30030
#  - name: mfdb
#    port: 5432
# type: ClusterIP
 type: NodePort
 
 
#---

#apiVersion: v1
#kind: Service
#metadata:
# name: myfinance
#spec:
# selector:
#  app: myfinance
# ports:
#  - name: http
#    port: 8181
#    nodePort: 30020
#  - name: https
#    port: 8443
#    nodePort: 30021
# type: NodePort

---

apiVersion: v1
kind: Service
metadata:
  name: swaggerui
spec:
  #this defines which pod is going to be presented by this service
  selector:
    app: swaggerui
  ports:
    - name: swaggerui
      port: 80
      nodePort: 30031
  type: NodePort