/**
 * Dac Services
 * Dac Service REST API
 *
 * OpenAPI spec version: 1.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package de.hf.dac.myfinance.client.api;

import io.swagger.client.ApiException;
import de.hf.dac.myfinance.client.model.StringListModel;
import org.junit.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for MyFinanceApi
 */
public class MyFinanceApiTest {

    private final MyFinanceApi api = new MyFinanceApi();

    
    /**
     * save Instrument
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addCurrency_envID_currencyCode_descriptionTest() throws ApiException {
        String envID = null;
        String currencyCode = null;
        String description = null;
        // String response = api.addCurrency_envID_currencyCode_description(envID, currencyCode, description);

        // TODO: test validations
    }
    
    /**
     * save Instrument
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addEquity_envID_isin_descriptionTest() throws ApiException {
        String envID = null;
        String isin = null;
        String description = null;
        // String response = api.addEquity_envID_isin_description(envID, isin, description);

        // TODO: test validations
    }
    
    /**
     * save Price
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addPrice_envID_currencyCode_isin_dayofprice_valueTest() throws ApiException {
        String envID = null;
        String currencyCode = null;
        String isin = null;
        String dayofprice = null;
        Double value = null;
        // String response = api.addPrice_envID_currencyCode_isin_dayofprice_value(envID, currencyCode, isin, dayofprice, value);

        // TODO: test validations
    }
    
    /**
     * save Instrument
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addSymbol_envID_isin_symbol_currencycodeTest() throws ApiException {
        String envID = null;
        String isin = null;
        String symbol = null;
        String currencycode = null;
        // String response = api.addSymbol_envID_isin_symbol_currencycode(envID, isin, symbol, currencycode);

        // TODO: test validations
    }
    
    /**
     * fillpricehistory
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void fillPricesHistory_envID_sourceId_isinTest() throws ApiException {
        String envID = null;
        Integer sourceId = null;
        String isin = null;
        // String response = api.fillPricesHistory_envID_sourceId_isin(envID, sourceId, isin);

        // TODO: test validations
    }
    
    /**
     * get Instruments
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getInstruments_envIDTest() throws ApiException {
        String envID = null;
        // List<Object> response = api.getInstruments_envID(envID);

        // TODO: test validations
    }
    
    /**
     * get Instruments
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getInstrumentshateos_envIDTest() throws ApiException {
        String envID = null;
        // List<Object> response = api.getInstrumentshateos_envID(envID);

        // TODO: test validations
    }
    
    /**
     * get Security
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSecurity_envID_isinTest() throws ApiException {
        String envID = null;
        String isin = null;
        // String response = api.getSecurity_envID_isin(envID, isin);

        // TODO: test validations
    }
    
    /**
     * List Data
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getStringListTest() throws ApiException {
        // StringListModel response = api.getStringList();

        // TODO: test validations
    }
    
    /**
     * get Security
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getValueCurve_envID_instrumentId_startdate_enddateTest() throws ApiException {
        String envID = null;
        Integer instrumentId = null;
        String startdate = null;
        String enddate = null;
        // String response = api.getValueCurve_envID_instrumentId_startdate_enddate(envID, instrumentId, startdate, enddate);

        // TODO: test validations
    }
    
    /**
     * importprices
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void importPrices_envIDTest() throws ApiException {
        String envID = null;
        // String response = api.importPrices_envID(envID);

        // TODO: test validations
    }
    
}
